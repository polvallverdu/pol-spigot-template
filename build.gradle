plugins {
    id 'java'
    id("io.github.goooler.shadow") version "8.1.8"
    id("io.papermc.paperweight.userdev") version "1.7.1"
    id("xyz.jpenilla.run-paper") version "2.3.0"
}

group = 'dev.pov'
version = '1.0-SNAPSHOT'

configurations {
    shadowImplementation
    shadowImplementation.extendsFrom(implementation)
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }

    // Aikar ACF
    maven { url = "https://hub.spigotmc.org/nexus/content/groups/public/" }

    // Jitpack
    maven { url = "https://jitpack.io" }

    // for Minedown
    maven {
        name = "minebench"
        url = "https://repo.minebench.de/"
    }

    // for PlaceholderAPI
    maven {
        name = "placeholderapi"
        url = "https://repo.extendedclip.com/content/repositories/placeholderapi/"
    }

    // ProtocolLib
    maven { url "https://repo.dmulloy2.net/repository/public/" }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:${project.PAPER_VERSION}")
    paperweight.paperDevBundle(project.PAPER_VERSION)

    // ACF - For commands
    shadowImplementation implementation("co.aikar:acf-paper:${project.ACF_VERSION}")

    // Minedown - For better Minecraft messages formatting
    shadowImplementation implementation("de.themoep:minedown-adventure:1.7.3-SNAPSHOT")

    // FastBoard - For Scoreboard
    shadowImplementation implementation("fr.mrmicky:fastboard:${project.FASTBOARD_VERSION}")

    // IF - For GUIs
    shadowImplementation implementation("com.github.stefvanschie.inventoryframework:IF:${project.IF_VERSION}")

    // PlaceholderAPI - For placeholders
    compileOnly("me.clip:placeholderapi:${project.PLACEHOLDERAPI_VERSION}")

    // ProtocolLib
    compileOnly("com.comphenix.protocol:ProtocolLib:${project.PROTOCOLIB_VERSION}")

}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion(project.MINECRAFT_VERSION)
    }
}

jar {
    archiveClassifier = "original"
}

shadowJar {
    archiveClassifier = ""

    configurations = [project.configurations.shadowImplementation]

    relocate 'co.aikar.commands', 'dev.polv.libs.template.acf'
    relocate 'co.aikar.locales', 'dev.polv.libs.template.locales'

    relocate 'de.themoep.minedown', 'dev.polv.libs.template.minedown'

    relocate 'fr.mrmicky.fastboard', 'dev.polv.libs.template.fastboard'

    relocate 'com.github.stefvanschie.inventoryframework', 'dev.polv.libs.template.inventoryframework'

    minimize()
}

tasks.build.dependsOn(tasks.shadowJar)
tasks.build.dependsOn(tasks.reobfJar)
